var inherits = require('util').inherits;
var BufferQueueReader = require('h5.buffers').BufferQueueReader;
var Transport = require('./Transport');
var exceptions = require('./exceptions');

var CRC_HI = [
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40
];

var CRC_LO = [
  0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
  0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
  0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
  0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
  0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
  0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
  0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
  0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
  0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
  0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
  0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
  0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
  0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
  0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
  0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
  0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
  0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
  0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
  0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
  0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
  0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
  0x41, 0x81, 0x80, 0x40
];

function crc16(buffer)
{
  var hi = 0xFF;
  var lo = 0xFF;

  for (var i = 0, l = buffer.length; i < l; ++i)
  {
    var chr = buffer[i];
    var idx = lo ^ chr;

    lo = hi ^ CRC_HI[idx];
    hi = CRC_LO[idx];
  }

  return hi << 8 | lo;
}

/**
 * @param {h5.modbus.Connection} connection
 * @param {?Object} options
 */
var RtuTransport = module.exports = function(connection, options)
{
  Transport.call(this);

  this.reader = new BufferQueueReader();
  this.timeouts = 0;
  this.currentRequest = null;
  this.eofTimeout = null;

  this.setUpOptions(options || {});
  this.setUpConnection(connection);

  this.onEndOfFrame = this.onEndOfFrame.bind(this);
};

inherits(RtuTransport, Transport);

RtuTransport.prototype.timeout;

RtuTransport.prototype.maxTimeouts;

RtuTransport.prototype.request = function(pdu, handler, timeout)
{
  if (this.currentRequest !== null)
  {
    throw new Error("Can not send another request while the previous has not yet completed.");
  }

  this.connection.write(this.frame(pdu));

  this.currentRequest = {
    handler: handler,
    timeout: this.createTimeoutHandler(timeout)
  };
};

RtuTransport.prototype.setUpOptions = function(options)
{
  this.timeout = 500;
  this.maxTimeouts = 10;
  this.eofInterval = 10;

  if (typeof options.timeout === 'number' && options.timeout > 0)
  {
    this.timeout = options.timeout;
  }

  if (typeof options.maxTimeouts === 'number' && options.maxTimeouts > 0)
  {
    this.maxTimeouts = options.maxTimeouts;
  }

  if (typeof options.eofInterval === 'number' && options.eofInterval > 0)
  {
    this.eofInterval = options.eofInterval;
  }

  for (var event in (options.listeners || {}))
  {
    this.on(event, options.listeners[event]);
  }
};

RtuTransport.prototype.setUpConnection = function(connection)
{
  connection.on('data', this.onData.bind(this));

  this.connection = connection;
};

RtuTransport.prototype.createTimeoutHandler = function(timeout)
{
  var me = this;

  function handleTimeout()
  {
    clearTimeout(me.eofTimeout);

    if (!me.currentRequest)
    {
      return;
    }

    var request = me.currentRequest;
    me.currentRequest = null;

    process.nextTick(function()
    {
      me.handleResponse(request.handler, exceptions.ResponseTimeout(), null);
    });

    if (++me.timeouts === me.maxTimeouts)
    {
      me.timeouts = 0;

      me.connection.disconnect(true);
    }
  }

  return setTimeout(handleTimeout, timeout || this.timeout);
};

RtuTransport.prototype.frame = function(pdu)
{
  var adu = new Buffer(pdu.length + 2);
  pdu.copy(adu, 0);
  adu.writeUInt16LE(crc16(pdu), pdu.length);

  return adu;
};

RtuTransport.prototype.onData = function(data)
{
  if (!this.currentRequest)
  {
    return;
  }

  this.reader.pushBuffer(data);

  clearTimeout(this.eofTimeout);

  this.eofTimeout = setTimeout(this.onEndOfFrame, this.eofInterval);
};

RtuTransport.prototype.onEndOfFrame = function()
{
  var request = this.currentRequest;
  this.currentRequest = null;

  clearTimeout(request.timeout);

  this.timeouts = 0;

  var error = null;
  var data = null;

  if (this.reader.length <= 5)
  {
    error = exceptions.IncompleteResponseFrame();
  }
  else if (!this.validCrc())
  {
    error = exceptions.InvalidChecksum();
  }
  else
  {
    try
    {
      var unit = this.reader.shiftByte();
      var fn = this.reader.shiftByte();

      if (fn > 0x80)
      {
        var errno = this.reader.shiftByte();

        error = errno in exceptions
          ? exceptions[errno]()
          : new Error("Unknown error code: " + errno);
      }
      else
      {
        data = this.reader.shiftBuffer(this.reader.length - 2);
      }
    }
    catch (err)
    {
      error = exceptions.IncompleteResponseFrame();
    }
  }

  this.reader.skip(this.reader.length);

  this.handleResponse(request.handler, error, data);
};

RtuTransport.prototype.validCrc = function()
{
  var chksum = this.reader.readUnsignedInt(2, -1, this.reader.length - 2);
  var frame = this.reader.readBytes(this.reader.length - 2, 0);

  return chksum === crc16(frame);
};

RtuTransport.prototype.handleResponse = function(handler, error, data)
{
  if (typeof handler !== 'function')
  {
    return;
  }

  try
  {
    handler(error, data);
  }
  catch (err)
  {
    this.emit('error', err);
  }
};
